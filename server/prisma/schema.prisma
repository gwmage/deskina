generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String?
  emailVerified     Boolean      @default(false)
  verificationToken String?      @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  scripts           Script[]
  sessions          Session[]
  tokenUsages       TokenUsage[]
}

model Session {
  id            String         @id @default(cuid())
  userId        String
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenUsages   TokenUsage[]

  @@index([userId])
}

model Conversation {
  id          String   @id @default(cuid())
  sessionId   String
  role        String
  content     String?   @db.Text
  imageBase64 String?  @db.Text
  embedding   Unsupported("vector(768)")?
  createdAt   DateTime @default(now())
  toolCalls   String?
  parts       Json?    // Add this new column to store structured data like function calls.
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model TokenUsage {
  id               String   @id @default(cuid())
  userId           String
  sessionId        String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  modelName        String
  createdAt        DateTime @default(now())
  session          Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
}

model Script {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  filePath    String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}
